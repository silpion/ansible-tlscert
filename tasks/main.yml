---
- name: Assert platform is supported
  tags: ssl
  assert:
    that:
      - ansible_os_family in ssl_supported_platforms
      - ansible_local['util'] is defined

- name: Include OS specific vars
  include_vars: "{{ ansible_os_family }}.yml"
  tags: ssl


- name: Update apt package cache
  tags: ssl
  sudo: yes
  when: ansible_os_family == 'Debian'
  apt:
    update_cache=yes
    cache_valid_time=3600


- name: Ensure default directories
  tags: ssl
  sudo: yes
  with_items:
    - dir: "{{ ssl_cnf_path|default(ssl_cnf_path_default) }}"
      mode: "{{ ssl_cnf_path_mode }}"
      owner: "{{ ssl_cnf_path_owner }}"
      group: "{{ ssl_cnf_path_group }}"
    - dir: "{{ ssl_crt_path|default(ssl_crt_path_default) }}"
      mode: "{{ ssl_crt_path_mode  }}"
      owner: "{{ ssl_crt_path_owner }}"
      group: "{{ ssl_crt_path_group }}"
    - dir: "{{ ssl_key_path|default(ssl_key_path_default) }}"
      mode: "{{ ssl_key_path_mode }}"
      owner: "{{ ssl_key_path_owner }}"
      group: "{{ ssl_key_path_group }}"
  file:
    state=directory
    dest={{ item.dir }}
    mode={{ item.mode }}
    owner={{ item.owner }}
    group={{ item.group }}

- name: Install required packages
  tags: ssl
  sudo: yes
  with_items: ssl_package_list
  action: "{{ ansible_pkg_mgr }} state=installed name={{ item }}"

- name: Install SSL certificates
  tags: ssl
  sudo: yes
  with_items: ssl_install
  copy:
    src=files/{{ item.name|default(item) }}.crt
    dest={{ ssl_crt_path|default(ssl_crt_path_default) }}/{{ item.name|default(item) }}.crt
    owner=0
    group=0
    mode=0644

- name: Install SSL certificate keys
  tags: ssl
  sudo: yes
  with_items: ssl_install
  copy:
    src=files/{{ item.name|default(item) }}.key
    dest={{ ssl_key_path|default(ssl_key_path_default) }}/{{ item.name|default(item) }}.pem
    owner=0
    group=0
    mode=0600

- name: Set defaults in ssl_create
  tags:
    - ssl
    - ssl-facts
  changed_when: False
  with_items: ssl_create
  register: ssl_localfact_create_result
  set_fact:
    name="{{ item.name }}"
    C="{{ item.C|default(ssl_openssl_default_C) }}"
    CN="{{ item.CN|default(ssl_openssl_default_CN) }}"
    ST="{{ item.ST|default(ssl_openssl_default_ST) }}"
    OU="{{ item.OU|default(ssl_openssl_default_OU) }}"
    L="{{ item.L|default(ssl_openssl_default_L) }}"
    O="{{ item.O|default(ssl_openssl_default_O) }}"
    email="{{ item.email|default(ssl_openssl_default_email)|default('webmaster@' + item.CN|default(ssl_openssl_default_CN)) }}"

- name: Format ssl_create
  tags:
    - ssl
    - ssl-facts
  changed_when: False
  when: ssl_localfact_create_result.results is defined
  set_fact: ssl_localfact_create="{{ ssl_localfact_create_result.results|map(attribute='ansible_facts')|list }}"

- name: Create openssl.cnf for certificates
  tags: ssl
  sudo: yes
  no_log: true
  with_items: ssl_localfact_create
  template:
    src=openssl.cnf.j2
    dest={{ ssl_cnf_path|default(ssl_cnf_path_default) }}/{{ item.name }}-openssl.cnf

- name: Create self-signed SSL certificates
  tags: ssl
  sudo: yes
  with_items: ssl_localfact_create
  command:
    openssl req
      -newkey "rsa:{{ item.bits|default(ssl_openssl_default_bits) }}"
      -nodes
      -x509
      -days {{ item.days|default(ssl_openssl_default_days) }}
      -keyout {% if ssl_key_path is defined %}{{ item.key|default(ssl_key_path + "/" + item.name + ".pem") }}{% else %}{{ item.key|default(ssl_key_path_default) + "/" + item.name + ".pem"}}{% endif %}
      -out {% if ssl_crt_path is defined %}{{ item.crt|default(ssl_crt_path + "/" + item.name + ".crt") }}{% else %}{{ item.crt|default(ssl_crt_path_default) + "/" + item.name + ".crt" }}{% endif %}
      -config {{ ssl_cnf_path|default(ssl_cnf_path_default) }}/{{ item.name }}-openssl.cnf
    creates={{ ssl_crt_path|default(ssl_crt_path_default) }}/{{ item.name }}.crt

- name: Install ssl facts
  tags: ssl
  sudo: yes
  template:
    src=facts.j2
    dest=/etc/ansible/facts.d/ssl-certificates.fact
    owner=0
    group=0
    mode=0644

- name: Re-read facts
  tags: ssl
  setup:
    filter=ansible_local
